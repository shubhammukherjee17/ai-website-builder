// Utility for creating and downloading zip files on the client side
// Using JSZip library would be ideal, but for now we'll create a simple text export

export interface ProjectExportData {
  projectName: string;
  files: Record<string, string>;
}

export function downloadAsZip(exportData: ProjectExportData) {
  // For browsers that support the File System Access API
  if ('showSaveFilePicker' in window) {
    downloadWithFileSystemAPI(exportData);
  } else {
    // Fallback: Create a combined file download
    downloadAsCombinedFile(exportData);
  }
}

async function downloadWithFileSystemAPI(exportData: ProjectExportData) {
  try {
    // @ts-expect-error - File System Access API is not fully typed yet
    const dirHandle = await window.showDirectoryPicker();
    
    for (const [fileName, content] of Object.entries(exportData.files)) {
      const fileHandle = await dirHandle.getFileHandle(fileName, { create: true });
      const writable = await fileHandle.createWritable();
      await writable.write(content);
      await writable.close();
    }
    
    console.log('Files exported successfully!');
  } catch (error) {
    console.error('Export failed:', error);
    // Fallback to combined file download
    downloadAsCombinedFile(exportData);
  }
}

function downloadAsCombinedFile(exportData: ProjectExportData) {
  // Create a combined file with all the project files
  let combinedContent = `# ${exportData.projectName}\n\nGenerated by AI Website Builder\n\n`;
  combinedContent += `## Files in this project:\n\n`;
  
  for (const [fileName] of Object.entries(exportData.files)) {
    combinedContent += `- ${fileName}\n`;
  }
  
  combinedContent += `\n---\n\n`;
  
  for (const [fileName, content] of Object.entries(exportData.files)) {
    combinedContent += `## File: ${fileName}\n\n`;
    combinedContent += `\`\`\`${getFileExtension(fileName)}\n${content}\n\`\`\`\n\n---\n\n`;
  }
  
  // Add instructions
  combinedContent += `## How to use these files:\n\n`;
  combinedContent += `1. Create a new folder for your project\n`;
  combinedContent += `2. Create each file listed above with its respective content\n`;
  combinedContent += `3. Run \`npm install\` to install dependencies\n`;
  combinedContent += `4. Run \`npm run dev\` to start the development server\n\n`;
  
  // Download the combined file
  const blob = new Blob([combinedContent], { type: 'text/markdown' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `${exportData.projectName.toLowerCase().replace(/[^a-z0-9-]/g, '-')}-project.md`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}

function getFileExtension(fileName: string): string {
  const ext = fileName.split('.').pop()?.toLowerCase();
  switch (ext) {
    case 'tsx':
    case 'jsx':
      return 'tsx';
    case 'ts':
      return 'typescript';
    case 'js':
      return 'javascript';
    case 'json':
      return 'json';
    case 'css':
      return 'css';
    case 'html':
      return 'html';
    default:
      return 'text';
  }
}

// Alternative: Create individual file downloads
export function downloadIndividualFiles(exportData: ProjectExportData) {
  Object.entries(exportData.files).forEach(([fileName, content]) => {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = fileName;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    // Add a small delay between downloads to prevent browser blocking
    setTimeout(() => {}, 100);
  });
}

// Create a README file for the exported project
export function generateReadme(projectName: string): string {
  return `# ${projectName}

This project was generated using the AI Website Builder.

## Getting Started

1. Make sure you have Node.js installed on your system
2. Install dependencies:
   \`\`\`bash
   npm install
   \`\`\`

3. Start the development server:
   \`\`\`bash
   npm run dev
   \`\`\`

4. Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

## Project Structure

- \`src/app/page.tsx\` - Main page component
- \`src/app/layout.tsx\` - Root layout component
- \`src/app/globals.css\` - Global styles
- \`package.json\` - Project dependencies and scripts
- \`next.config.js\` - Next.js configuration
- \`tailwind.config.js\` - Tailwind CSS configuration
- \`tsconfig.json\` - TypeScript configuration

## Customization

You can customize this project by:
- Modifying the components in \`src/app/page.tsx\`
- Adding new components in the \`src/components\` directory
- Updating styles in \`src/app/globals.css\` or using Tailwind classes
- Adding new pages in the \`src/app\` directory

## Deployment

You can deploy this project using:
- [Vercel](https://vercel.com/) (recommended for Next.js apps)
- [Netlify](https://netlify.com/)
- [AWS Amplify](https://aws.amazon.com/amplify/)
- Any other static hosting provider

## Learn More

- [Next.js Documentation](https://nextjs.org/docs)
- [React Documentation](https://reactjs.org/)
- [Tailwind CSS Documentation](https://tailwindcss.com/docs)

---

Generated by AI Website Builder - Create stunning websites with drag-and-drop simplicity!
`;
}
